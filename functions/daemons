# vim:syn=zsh

function fork {
  eval '(("$@" &>/dev/null &; echo $!) &)'
}

function _fork {
  local curcontext="$curcontext" state line

  _arguments -C -s -A "-*"

  args=( "$@" )
  _alternative -O args \
    'commands:external command:_path_commands' \
    'builtins:builtin command:compadd -k builtins' \
    'functions:shell function:compadd -k functions' \
    'aliases:alias:compadd -k aliases' \
    'reserved-words:reserved word:compadd -k reswords'
}

compdef _fork fork

function start_agent
{
    if ps --no-headers -C X &>/dev/null && [ ! -z "$DISPLAY" ]; then
      eval `keychain --eval -Q -q id_rsa`
    else
      eval `keychain --eval --nogui -Q -q id_rsa`
    fi
}

function check_ssh
{
  if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || start_agent
  else
    start_agent
  fi
}

function startx_on_request
{
  local startx
  echo -n "Do you want to start X11? (Y/n) "
  read -q startx
  case "${startx}" in
    ([Nn]|[Nn][Oo])
    ;;
    (*)
      startx
    ;;
  esac
}

function start_audio
{
  echo "jack"
    fork "$(cat "${HOME}/.jackdrc")" > ~/var/run/jackd.pid
    #[ -e /etc/rc.d/ ] && /etc/rc.d/icecast start || (mkdir -p ~/var/run; fork "icecast -c /etc/icecast2/icecast.xml" > ~/var/run/icecast.pid)
    sleep 2
    #fork darkice > ~/var/run/darkice.pid
    mocp -S || (rm ~/.moc/pid && mocp -S)
    #while [[ $(jack_lsp | grep '^darkice' | wc -l) != 2 ]]; do
        #sleep 0.1
    #done
    #DIPID="$(jack_lsp | grep '^darkice' | sed -r 's/^darkice-|:.+$//g' | tail -n1)"
    #jack_connect moc:output0 darkice-${DIPID}:left
    #jack_connect moc:output1 darkice-${DIPID}:right
}

function stop_audio
{
  kill -9 `cat ~/.moc/pid` `cat ~/var/run/{jackd,darkice,icecast}.pid`
  rm ~/.moc/pid ~/var/run/{jackd,darkice,icecast}.pid
}

function wait_net
{
  echo "Waiting while connection is unreachable" >&2
  while ! ping -c1 google.it &>/dev/null; do
    sleep 5
  done
}
