# vim:syn=zsh
# borra prompt theme

prompt_borra_setup() {
  autoload -U colors && colors
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  add-zsh-hook precmd prompt_borra_precmd
  vcs_info # need VCS_INFO_backends

  zstyle ':zsh:prompt:borra' plugins _zsh_prompt_userhost _zsh_prompt_pts rvm_prompt_info vcs_prompt_info
  zstyle ':zsh:prompt:borra' prefix '%{$fg[blue]%}(%{$reset_color%}'
  zstyle ':zsh:prompt:borra' separator '%{$fg[blue]%}-%{$reset_color%}'
  zstyle ':zsh:prompt:borra' suffix '%{$fg[blue]%}%)%{$reset_color%}'
  zstyle ':zsh:prompt:borra' top '%{$fg[blue]%}╭-%{$reset_color%}'
  zstyle ':zsh:prompt:borra' bottom '%{$fg[blue]%}╰─%{$reset_color%}'
  zstyle ':zsh:prompt:borra' prompt '%{$fg[blue]%}(%{$reset_color%}%B%$((COLUMNS / 2))<...<%~%<<%b%{$fg[blue]%})%{$fg[yellow]%}>%{$reset_color%} '
  zstyle ':zsh:prompt:borra' vcs_enable ${VCS_INFO_backends[@]}
  zstyle ':zsh:prompt:borra' vcs_format '%b: %i'

  local prefix
  local suffix
  zstyle -s ':zsh:prompt:borra' prefix 'prefix'
  zstyle -s ':zsh:prompt:borra' suffix 'suffix'

  zstyle ':vcs_info:*' check-for-changes true
  zstyle ':vcs_info:*' unstagedstr ' %F{yellow}⚑%f'
  zstyle ':vcs_info:*' stagedstr ' %F{green}⚑%f'
  zstyle ':vcs_info:*' actionformats '%b%u%c [%a]'
  zstyle ':vcs_info:*' formats '%b%u%c'
  zstyle ':vcs_info:*+set-message:*' hooks git-st

  prompt_borra_precmd
  RPS1='%(?..%{$fg[red]%}%? ↵%{$reset_color%})'
}

prompt_borra_precmd() {
  PROMPT="$(_zsh_prompt_create)"
}

_zsh_prompt_wrap() {
  local prefix
  local suffix

  zstyle -s ':zsh:prompt:borra' prefix 'prefix'
  zstyle -s ':zsh:prompt:borra' suffix 'suffix'

  print -n -- "$2$prefix$1$suffix"
}

_zsh_prompt_item() {
  local res

  res="$($1 "$2" 2>/dev/null)"
  case "$?" in
    0) _zsh_prompt_wrap "$res" "$2" ;;
    23) print -n "$res" ;;
    *) return 1 ;;
  esac
}

_zsh_prompt_plugins() {
  local res=""
  local plugin
  local plugins
  local sep

  zstyle -a ':zsh:prompt:borra' plugins 'plugins'

  for plugin in ${plugins[*]}
  do
    res+="$(_zsh_prompt_item "$plugin" "$sep")"
    [ -z "$sep" -a ! -z "$res" ] && zstyle -s ':zsh:prompt:borra' separator 'sep'
  done

  print -n "${res}"
}

_zsh_prompt_create() {
  local plugins="$(_zsh_prompt_plugins)"
  local res=""
  local top
  local bottom
  local prompt

  if [ ! -z "$plugins" ]
  then
    zstyle -s ':zsh:prompt:borra' top 'top'
    zstyle -s ':zsh:prompt:borra' bottom 'bottom'
    res="${top}${plugins}
${bottom}"
  fi
  zstyle -s ':zsh:prompt:borra' prompt 'prompt'
  print -n "${res}${prompt}"
}

_zsh_prompt_userhost() {
  print -n '%(!.%SROOT%s.%n)%{$fg[blue]%}@%{$reset_color%}%m'
}

_zsh_prompt_pts() {
  print -n '/dev/%y'
}

rvm_prompt_info() {
  which rvm &>/dev/null || return 1
  local rb="$(rvm-prompt s)"
  [ -z "${rb}" ] && echo "$(rvm-prompt i v p r)" || echo "${rb}"
}

function +vi-git-st {
  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    hook_com[unstaged]=' %F{red}⚑%f'
  fi
}

vcs_prompt_info() {
  local res=""
  local sep="$1"
  local backend
  local enabled
  local fmt
  local s

  vcs_info # need VCS_INFO_backends
  zstyle -a ':zsh:prompt:borra' vcs_enable enabled
  zstyle -s ':zsh:prompt:borra' vcs_format fmt

  for backend in ${VCS_INFO_backends[@]}; do
    [ "${enabled[(I)$backend]}" = 0 ] && continue
    zstyle ':vcs_info:*' enable "$backend"
    vcs_info || continue
    [ -z "${vcs_info_msg_0_}" ] && continue

    zformat -f s "$fmt" b:"$backend" i:"$vcs_info_msg_0_"

    res+="$(_zsh_prompt_wrap "$s" "$sep")"

    [ -z "$sep" -a ! -z "$res" ] && zstyle -s ':zsh:prompt:borra' separator 'sep'
  done

  print -n -- "$res"
  return 23
}

prompt_borra_setup "$@"
