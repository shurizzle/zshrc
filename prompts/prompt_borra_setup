# vim:syn=zsh
# A two line pluggable and themable theme (blue/white default).
#
# Author:
# shura <shura1991@gmail.com>
#
# Features:
#   - Two lines.
#   - All the VCS informations (default).
#   - Pluggable.
#   - Themable.
#
# Settings (:prezto:prompt:borra):
#   - plugins:    list of plugins (array)
#   - prefix:     right-side of plugin wrapper (string)
#   - separator:  plugin separator (string)
#   - suffix:     left-side of plugin wrapper (string)
#   - top:        beginning of first line (string)
#   - bottom:     beginning of second line (string)
#   - prompt:     right-side of second line (string)
#   - rprompt:    right prompt enable or disable (bool)
#
# Plugins settings (:prezto:prompt:borra:plugin:$plugin):
#   vcs:
#     - enable: vcs enable backends (array)
#     - format: vcs backends format (string):
#                   - %b: backend name (to write a bold-end, escape it using %%b)
#                   - %i: formatted text according to zstyle ':vcs_info:*' formats (or actionformats)
#   userhost
#     - format: username and hostname format (string):
#                   - %u: username
#                   - %h: hostname
# Example:
#   zstyle ':prezto:prompt:borra' separator ' '
#
# Screenshots:
#   http://i.imgur.com/bIWde.png
# ascii.io presentation:
#   http://ascii.io/a/1308
# borra prompt theme

function _zsh_prompt_set_if_not {
  zstyle -T "$1" "$2" && zstyle "$@"
}

function prompt_borra_setup {
  autoload -U colors && colors
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info
  prompt_opts=(cr percent subst)

  add-zsh-hook precmd prompt_borra_precmd
  vcs_info # need VCS_INFO_backends

  _zsh_prompt_set_if_not ':prezto:prompt:borra' plugins 'userhost' 'pts' 'rvm-info' 'vcs-info'
  _zsh_prompt_set_if_not ':prezto:prompt:borra' prefix '%{$fg[blue]%}(%{$reset_color%}'
  _zsh_prompt_set_if_not ':prezto:prompt:borra' separator '%{$fg[blue]%}-%{$reset_color%}'
  _zsh_prompt_set_if_not ':prezto:prompt:borra' suffix '%{$fg[blue]%}%)%{$reset_color%}'
  _zsh_prompt_set_if_not ':prezto:prompt:borra' top '%{$fg[blue]%}╭-%{$reset_color%}'
  _zsh_prompt_set_if_not ':prezto:prompt:borra' bottom '%{$fg[blue]%}╰─%{$reset_color%}'
  _zsh_prompt_set_if_not ':prezto:prompt:borra' prompt '%{$fg[blue]%}(%{$reset_color%}%B%$((COLUMNS / 2))<...<%~%<<%b%{$fg[blue]%})%{$fg[yellow]%}>%{$reset_color%} '
  _zsh_prompt_set_if_not ':prezto:prompt:borra' rprompt 'yes'
  _zsh_prompt_set_if_not ':prezto:prompt:borra:plugin:vcs' enable ${VCS_INFO_backends[@]}
  _zsh_prompt_set_if_not ':prezto:prompt:borra:plugin:vcs' format '%b: %i'
  _zsh_prompt_set_if_not ':prezto:prompt:borra:plugin:userhost' format '%u%{$fg[blue]%}@%{$reset_color%}%h'

  zstyle ':vcs_info:*' check-for-changes 'true'
  zstyle ':vcs_info:*' unstagedstr ' %F{yellow}⚑%f'
  zstyle ':vcs_info:*' stagedstr ' %F{green}⚑%f'
  zstyle ':vcs_info:*' actionformats '%b%u%c [%a]'
  zstyle ':vcs_info:*' formats '%b%u%c'
  zstyle ':vcs_info:*+set-message:*' hooks 'git-st'

  prompt_borra_precmd
}

function prompt_borra_precmd {
  local rprompt
  PROMPT="$(_zsh_prompt_create)"
  zstyle -b ':prezto:prompt:borra' rprompt 'rprompt'
  if [ "$rprompt" = yes ]; then
    RPROMPT='%(?..%{$fg[red]%}%? ↵%{$reset_color%})'
  else
    RPROMPT=''
  fi
}

function _zsh_prompt_wrap {
  local prefix
  local suffix

  zstyle -s ':prezto:prompt:borra' prefix 'prefix'
  zstyle -s ':prezto:prompt:borra' suffix 'suffix'

  print -n -- "$2$prefix$1$suffix"
}

function _zsh_prompt_item {
  local res

  res="$($1 "$2" 2>/dev/null)"
  case "$?" in
    0) _zsh_prompt_wrap "$res" "$2" ;;
    23) print -n "$res" ;;
    *) return 1 ;;
  esac
}

function _zsh_prompt_plugins {
  local res=""
  local plugin
  local plugins
  local sep

  zstyle -a ':prezto:prompt:borra' plugins 'plugins'

  for plugin in ${plugins[*]}
  do
    res+="$(_zsh_prompt_item "+borra-$plugin" "$sep")"
    [ -z "$sep" -a ! -z "$res" ] && zstyle -s ':prezto:prompt:borra' separator 'sep'
  done

  print -n "${res}"
}

function _zsh_prompt_create {
  local plugins="$(_zsh_prompt_plugins)"
  local res=""
  local top
  local bottom
  local prompt

  if [ ! -z "$plugins" ]
  then
    zstyle -s ':prezto:prompt:borra' top 'top'
    zstyle -s ':prezto:prompt:borra' bottom 'bottom'
    res="${top}${plugins}
${bottom}"
  fi
  zstyle -s ':prezto:prompt:borra' prompt 'prompt'
  print -n "${res}${prompt}"
}

function +borra-userhost {
  local fmt
  local res
  zstyle -s ':prezto:prompt:borra:plugin:userhost' format 'fmt'
  zformat -f res "$fmt" u:'%(!.%SROOT%s.%n)' h:'%m'
  print -n "$res"
}

function +borra-pts {
  print -n '/dev/%y'
}

function +borra-rvm-info {
  (( $+functions[rvm] )) || return 1
  local rb="$(rvm-prompt s)"
  [ -z "${rb}" ] && echo "$(rvm-prompt i v p r)" || echo "${rb}"
}

function +vi-git-st {
  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    hook_com[unstaged]=' %F{red}⚑%f'
  fi
}

function +borra-vcs-info {
  local res=""
  local sep="$1"
  local backend
  local enabled
  local fmt
  local s

  vcs_info # need VCS_INFO_backends
  zstyle -a ':prezto:prompt:borra:plugin:vcs' enable 'enabled'
  zstyle -s ':prezto:prompt:borra:plugin:vcs' format 'fmt'

  for backend in ${VCS_INFO_backends[@]}; do
    [ "${enabled[(I)$backend]}" = 0 ] && continue
    zstyle ':vcs_info:*' enable "$backend"
    vcs_info || continue
    [ -z "${vcs_info_msg_0_}" ] && continue

    zformat -f s "$fmt" b:"$backend" i:"$vcs_info_msg_0_"

    res+="$(_zsh_prompt_wrap "$s" "$sep")"

    [ -z "$sep" -a ! -z "$res" ] && zstyle -s ':prezto:prompt:borra' separator 'sep'
  done

  print -n -- "$res"
  return 23
}

prompt_borra_setup "$@"
